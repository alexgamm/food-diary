plugins {
    id 'java'
    id 'maven-publish'
    id 'co.uzzu.dotenv.gradle' version '4.0.0'
    id 'io.freefair.lombok' version '8.4'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.graalvm.buildtools.native' version '0.9.28'
}

group 'fooddiary'
version '0.0.1'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'org.jetbrains:annotations:24.1.0'
    implementation 'org.jsoup:jsoup:1.15.3'
    implementation 'com.github.vdybysov:ydb-client:0.0.1'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-core:5.10.0'
}

tasks.named("bootBuildImage") {
    builder = "gcr.io/paketo-buildpacks/builder:base"
    environment = [
            'BP_NATIVE_IMAGE': 'true',
            'BP_NATIVE_IMAGE_BUILD_ARGUMENTS': '--trace-class-initialization=org.apache.commons.logging.LogFactory'
    ]
    imageName = "cr.yandex/crpaji3otrgc6rl6gms6/${project.name}:${project.version}"
}

publishing {
    publications {
        local(MavenPublication) {
            from components.java

            pom.withXml {
                def buildNode = asNode().appendNode('build')
                def pluginsNode = buildNode.appendNode('plugins')
                def pluginNode = pluginsNode.appendNode('plugin')

                pluginNode.appendNode('groupId', 'org.apache.maven.plugins')
                pluginNode.appendNode('artifactId', 'maven-compiler-plugin')

                def configurationNode = pluginNode.appendNode('configuration')
                configurationNode.appendNode('source', '17')
                configurationNode.appendNode('target', '17')

                asNode().appendNode('repositories').appendNode('repository').with {
                    appendNode('id', 'jitpack')
                    appendNode('name', 'Jitpack')
                    appendNode('url', 'https://jitpack.io')
                }
                asNode().dependencies.dependency.each {
                    it.scope*.value = 'compile'
                }
            }
        }
    }

    repositories {
        maven {
            name = 'buildRepo'
            url = layout.buildDirectory.dir("repo")
        }
    }
}

test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    options.encoding = 'UTF-8'
}

tasks.register('buildZip', Zip) {
    group = 'build'

    dependsOn publish
    from "${project.layout.buildDirectory.get().asFile}/publications/local/pom-default.xml"
    rename 'pom-default.xml', 'pom.xml'

    dependsOn delombok
    from(delombok.target) {
        into("src/main/java")
    }

    archiveFileName = 'build.zip'
}

tasks.register('deploy', Exec) {
    group = 'deploy'
    dependsOn("buildZip")
    commandLine 'yc', 'serverless', 'function', 'version', 'create',
            '--function-name', deployFunctionName,
            '--runtime', deployRuntime,
            '--entrypoint', deployEntrypoint,
            '--memory', deployMemory,
            '--execution-timeout', deployExecutionTimeout,
            '--source-path', tasks.buildZip.archiveFile.get().asFile.absolutePath,
            '--service-account-id', env.SERVICE_ACCOUNT_ID.value,
            '--environment', "DB_CONNECTION_STRING=${env.DB_CONNECTION_STRING.value}",
            '--environment', "FAT_SECRET_SEARCH_URL=${env.FAT_SECRET_SEARCH_URL.value}"

}